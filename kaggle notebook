{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/mariasaif/roberta-emotional-model?scriptVersionId=205939407\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-08T10:21:12.932338Z","iopub.execute_input":"2024-11-08T10:21:12.932779Z","iopub.status.idle":"2024-11-08T10:21:14.384538Z","shell.execute_reply.started":"2024-11-08T10:21:12.932744Z","shell.execute_reply":"2024-11-08T10:21:14.383292Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"%%capture\n!pip install datasets transformers pandas matplotlib tqdm --upgrade --quiet","metadata":{"execution":{"iopub.status.busy":"2024-11-08T10:21:14.387062Z","iopub.execute_input":"2024-11-08T10:21:14.387936Z","iopub.status.idle":"2024-11-08T10:22:29.932161Z","shell.execute_reply.started":"2024-11-08T10:21:14.38789Z","shell.execute_reply":"2024-11-08T10:22:29.930466Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import datasets\nfrom transformers import pipeline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm","metadata":{"execution":{"iopub.status.busy":"2024-11-08T10:22:29.93393Z","iopub.execute_input":"2024-11-08T10:22:29.934354Z","iopub.status.idle":"2024-11-08T10:22:53.012917Z","shell.execute_reply.started":"2024-11-08T10:22:29.934316Z","shell.execute_reply":"2024-11-08T10:22:53.010901Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stderr","text":"2024-11-08 10:22:38.520968: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-11-08 10:22:38.521136: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-11-08 10:22:38.698332: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load the dataset","metadata":{}},{"cell_type":"code","source":"from datasets import load_dataset\n\ndataset = load_dataset(\"AnonymousSub/recipe_RL_data_roberta-base\")","metadata":{"execution":{"iopub.status.busy":"2024-11-08T10:22:53.015972Z","iopub.execute_input":"2024-11-08T10:22:53.016816Z","iopub.status.idle":"2024-11-08T10:25:08.692164Z","shell.execute_reply.started":"2024-11-08T10:22:53.016767Z","shell.execute_reply":"2024-11-08T10:25:08.690306Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"README.md:   0%|          | 0.00/1.44k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d989b6834ac34951a8bc4717d0ef008d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Resolving data files:   0%|          | 0/55 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8eec4d8e01d84fed915184c4701ace23"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"dataset_infos.json:   0%|          | 0.00/1.33k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d4dafc03c69a4b0aa4f0705f57111cb4"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading data:   0%|          | 0/55 [00:00<?, ?files/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"43c0a9bd3a6b474396a081a6ed0c2da9"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00015-of-00055.parquet:   0%|          | 0.00/5.46M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"db618aacd6264fd6a8bbd77c6fd8df73"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00009-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a10d4eff365e4eea8605ed63b5c70c75"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00004-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b2163bb1ad32424b98050a080e22c2e6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00014-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"22f9adfdf15b433fab7f67f4f0c00ea2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00005-of-00055.parquet:   0%|          | 0.00/5.42M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1a871d238d0f4578a9b7b00fea8ecf56"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00002-of-00055.parquet:   0%|          | 0.00/5.45M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0e3f93d145474ff4acbb2456fd34deee"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00012-of-00055.parquet:   0%|          | 0.00/5.45M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ea0896c05eb4468ebec794a2fb15878f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00000-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"35d266c4c9db4ad887f829c80b7b613f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00001-of-00055.parquet:   0%|          | 0.00/5.42M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f46924d6d97345a897f0367ef445def2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00007-of-00055.parquet:   0%|          | 0.00/5.45M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d78bd804a15e4bcf9b1899de2e745ad9"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00010-of-00055.parquet:   0%|          | 0.00/5.42M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0606a4b412924fbbbb060babad3a2d47"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00008-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0d822a0de07942bfba797666a2d9a5db"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00013-of-00055.parquet:   0%|          | 0.00/5.46M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b778f293cdcc4a8e92711a6475c037eb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00011-of-00055.parquet:   0%|          | 0.00/5.46M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"650b776857394b54bbd8d30058f9bc42"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00003-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8b6af870257e41f0be35fc38be16d401"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00006-of-00055.parquet:   0%|          | 0.00/5.45M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"062951aab6384d52873f7af2ccc8a0b8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00016-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9055cb09427944e69554c85b363a2058"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00017-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b8c1089d29354b13b9fe7d09a25881da"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00018-of-00055.parquet:   0%|          | 0.00/5.42M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"094d5705578b45ef9c439b1badcb58a0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00019-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3fedfa0340eb4448b32cd1711961dfb8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00021-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d58bbd93468040aa8910ee868c1ee458"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00024-of-00055.parquet:   0%|          | 0.00/5.47M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2652da46140a4e32bf0e561bb092ffb5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00026-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"097cf860edf345e8b206e71733bf24f5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00025-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"45e5fc1d2edc42cfac187671090d1db8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00028-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"37c8a2f420194a21bb085e0194155faa"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00030-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d2897895359f4ba4917b5a2e6a4ebea8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00020-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b1feb810f4f64412a9469ffa828c30cc"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00023-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"36ad3418f6a6438299eff11f25ce6610"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00029-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"de436a5cf65e40f5b721e87e084176f4"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00027-of-00055.parquet:   0%|          | 0.00/5.42M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a1e2313a61aa4b3ca113e6935fc58dcb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00022-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d9d45cd804514b0db60786ea7f5125e8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00031-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"29ff8f3349c8463e922f10d9fac6e2a2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00032-of-00055.parquet:   0%|          | 0.00/5.39M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bc8cf80401ea497bbdbd98b915039542"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00034-of-00055.parquet:   0%|          | 0.00/5.42M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7f987d8a1df347448023b4382d40c2d9"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00033-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4c66ad3226f940a0911b0f2efdc178b7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00035-of-00055.parquet:   0%|          | 0.00/5.41M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"748bb53928694e74b244facb63616d77"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00041-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"785aeac9a4f344d2b24da11a7b6530bf"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00036-of-00055.parquet:   0%|          | 0.00/5.46M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f4abf28a4ff3479f9b79ae01740a9c6d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00038-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"eae2ea6328e3421aa4adc2de47cadd07"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00043-of-00055.parquet:   0%|          | 0.00/5.45M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d68a725d265a4c3ea41c45da6c45db91"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00039-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e4b5b149f4744a0b9200bc9e8058b5c5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00042-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3df3259051cf4881adaa2f15832ea0f7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00040-of-00055.parquet:   0%|          | 0.00/5.47M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"90cb10e6b06c45af9a59c93739740169"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00037-of-00055.parquet:   0%|          | 0.00/5.45M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"37778ec12def4940bae8490c50666a64"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00045-of-00055.parquet:   0%|          | 0.00/5.45M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"94c7dc51f9024fd683b7c8b155271f94"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00044-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c1f430a9f6f04d6c9caf746035342201"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00046-of-00055.parquet:   0%|          | 0.00/5.42M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"06b04a7f44e14fd8909ef35ac149dfb3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00047-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"dee49bbe7b6e433a8e2e95465ffd9fcd"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00048-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4e3165d43674416fa6bab0e06a35066c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00049-of-00055.parquet:   0%|          | 0.00/5.45M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c71c903d69254d1d9e9384d85741b547"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00051-of-00055.parquet:   0%|          | 0.00/5.46M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f36fae67ec8c4f968861b86f8ac2d8ae"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00050-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cb7e5301ff7146019794c2839b437e1c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00052-of-00055.parquet:   0%|          | 0.00/5.43M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"723ea5a664db4364aa92b48fa9c76f7c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00053-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"452fd8ecef9542c09ce28ff6cf269421"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00054-of-00055.parquet:   0%|          | 0.00/5.44M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"661c158ca0f9483284812c89cc387ec7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating train split:   0%|          | 0/2255673 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0fa5bc9ffac7481ca255bb1809cb6113"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Loading dataset shards:   0%|          | 0/56 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0a2827fed97143748ba7d50c77acca49"}},"metadata":{}}]},{"cell_type":"markdown","source":"# **We just want the dataset test split here for evaluation**","metadata":{}},{"cell_type":"code","source":"split_name = \"test\"\n\ndataset_name, dataset_config_name = \"go_emotions\", \"simplified\"\ndataset_dict = datasets.load_dataset(dataset_name, dataset_config_name)\ndataset_dict[split_name][0]","metadata":{"execution":{"iopub.status.busy":"2024-11-08T10:25:08.694378Z","iopub.execute_input":"2024-11-08T10:25:08.695151Z","iopub.status.idle":"2024-11-08T10:25:14.40901Z","shell.execute_reply.started":"2024-11-08T10:25:08.694971Z","shell.execute_reply":"2024-11-08T10:25:14.407643Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"README.md:   0%|          | 0.00/9.40k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a018063d3cba4e8c90ac89abd812f44c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"train-00000-of-00001.parquet:   0%|          | 0.00/2.77M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"71bb6e2fa7ea4742b117aed0a322b996"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"validation-00000-of-00001.parquet:   0%|          | 0.00/350k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b75adb809ca344dca36b3c1079c94638"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"test-00000-of-00001.parquet:   0%|          | 0.00/347k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"98d87152f782475e8cd16fad429f7174"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating train split:   0%|          | 0/43410 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e92772eea60b4669a42d5fdf1a7024ff"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating validation split:   0%|          | 0/5426 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"171b1ce241544a2894ce1a4fef96d97c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating test split:   0%|          | 0/5427 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5ef860b5ad1245f4bd59be7b78ddfd50"}},"metadata":{}},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"{'text': 'I’m really sorry about your situation :( Although I love the names Sapphira, Cirilla, and Scarlett!',\n 'labels': [25],\n 'id': 'eecwqtt'}"},"metadata":{}}]},{"cell_type":"code","source":"labels = dataset_dict[split_name].features[\"labels\"].feature.names\nprint({i: l for i, l in enumerate(labels)})","metadata":{"execution":{"iopub.status.busy":"2024-11-08T10:25:14.410494Z","iopub.execute_input":"2024-11-08T10:25:14.410859Z","iopub.status.idle":"2024-11-08T10:25:14.418475Z","shell.execute_reply.started":"2024-11-08T10:25:14.410827Z","shell.execute_reply":"2024-11-08T10:25:14.417139Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"{0: 'admiration', 1: 'amusement', 2: 'anger', 3: 'annoyance', 4: 'approval', 5: 'caring', 6: 'confusion', 7: 'curiosity', 8: 'desire', 9: 'disappointment', 10: 'disapproval', 11: 'disgust', 12: 'embarrassment', 13: 'excitement', 14: 'fear', 15: 'gratitude', 16: 'grief', 17: 'joy', 18: 'love', 19: 'nervousness', 20: 'optimism', 21: 'pride', 22: 'realization', 23: 'relief', 24: 'remorse', 25: 'sadness', 26: 'surprise', 27: 'neutral'}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Organize the target data into arrays based on labels, as we want to evaluate each label separately in a dataset with multiple labels and classes.","metadata":{}},{"cell_type":"code","source":"num_items, num_labels = len(dataset_dict[split_name]), len(labels)\ny_targets_all = np.zeros((num_items, num_labels), dtype=int)\nfor i, labels_indices in enumerate(dataset_dict[split_name][\"labels\"]):\n    for label_index in labels_indices:\n        y_targets_all[i, label_index] = 1\n\nprint(y_targets_all[0:3])","metadata":{"execution":{"iopub.status.busy":"2024-11-08T10:25:14.420049Z","iopub.execute_input":"2024-11-08T10:25:14.420454Z","iopub.status.idle":"2024-11-08T10:25:20.31395Z","shell.execute_reply.started":"2024-11-08T10:25:14.420422Z","shell.execute_reply":"2024-11-08T10:25:20.312061Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]\n [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load the model and run it\nLoading in a multi-label, multi-class classifier model based on Roberta-base","metadata":{}},{"cell_type":"code","source":"classifier = pipeline(task=\"text-classification\", model=\"SamLowe/roberta-base-go_emotions\", top_k=None)","metadata":{"execution":{"iopub.status.busy":"2024-11-08T10:25:20.315633Z","iopub.execute_input":"2024-11-08T10:25:20.316152Z","iopub.status.idle":"2024-11-08T10:25:26.589474Z","shell.execute_reply.started":"2024-11-08T10:25:20.316103Z","shell.execute_reply":"2024-11-08T10:25:26.588254Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/1.92k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"dd7d2d22a1274fd1ac65fd823cd1f45f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/499M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"325af1d591da4beb91dc2bd8746bd9d3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/380 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"44fd2e061da84b978638256f39a466ac"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.json:   0%|          | 0.00/798k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2cad54da98c24006a40da731098fb57b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6a963abecfb3479f9a8c841b8587aec6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/2.11M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bfd505565e224ee68cdb157108f694bb"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/280 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"60833aedfea44b4399b05b4812b957d0"}},"metadata":{}}]},{"cell_type":"code","source":"model_outputs = classifier(dataset_dict[split_name][\"text\"])\n\nprint(dataset_dict[split_name][\"text\"][0])\nprint(model_outputs[0])","metadata":{"execution":{"iopub.status.busy":"2024-11-08T10:25:26.591156Z","iopub.execute_input":"2024-11-08T10:25:26.592014Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_probas_all = np.zeros((num_items, num_labels), dtype=float)\nfor i, item_probas in enumerate(model_outputs):\n    for item_proba in item_probas:\n        label, score = item_proba[\"label\"], item_proba[\"score\"]\n        label_index = labels.index(label)\n        y_probas_all[i, label_index] = score","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"i = 3856\nprint(dataset_dict[split_name][i])\nprint(np.round(y_probas_all[i], 3).tolist())\ntop = np.argmax(y_probas_all[i])\nprint(f\"Top label proba is label number {top} ({labels[top]}): {y_probas_all[i][top]}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Evalutation","metadata":{}},{"cell_type":"code","source":"from sklearn import metrics\nthreshold = 0.5\ny_preds_all = y_probas_all > threshold\n\nprint(\"Overall (macro)\")\nprint(\"===============\")\nprint(f\"Accuracy: {metrics.accuracy_score(y_targets_all, y_preds_all):.3f}\")\nprint(f\"Precision: {metrics.precision_score(y_targets_all, y_preds_all, average='macro', zero_division=0):.3f}\")\nprint(f\"Recall: {metrics.recall_score(y_targets_all, y_preds_all, average='macro', zero_division=0):.3f}\")\nprint(f\"F1: {metrics.f1_score(y_targets_all, y_preds_all, average='macro', zero_division=0):.3f}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def calc_label_metrics(label, y_targets, y_preds, threshold):\n    return {\n        \"label\": label,\n        \"accuracy\": metrics.accuracy_score(y_targets, y_preds),\n        \"precision\": metrics.precision_score(y_targets, y_preds, zero_division=0),\n        \"recall\": metrics.recall_score(y_targets, y_preds, zero_division=0),\n        \"f1\": metrics.f1_score(y_targets, y_preds, zero_division=0),\n        \"mcc\": metrics.matthews_corrcoef(y_targets, y_preds),\n        \"support\": y_targets.sum(),\n        \"threshold\": threshold,\n    }","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"threshold = 0.5\ny_preds_all = (y_probas_all > threshold).astype(int)\n\nresults = []\nfor label_index, label in enumerate(labels):\n    y_targets, y_preds = y_targets_all[:, label_index], y_preds_all[:, label_index]\n    results.append(calc_label_metrics(label, y_targets, y_preds, threshold))\n\nper_label_results = pd.DataFrame(results, index=labels)\ndisplay(per_label_results.drop(columns=[\"label\"]).round(3))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def dataset_wide_metrics(df):\n    simple_mean = {\n        m: round(df[m].mean(), 3)\n        for m in [\"precision\", \"recall\", \"f1\", \"mcc\"]\n    }\n    print(\"Simple mean of labels:\", simple_mean)\n    weighted = {\n        m: round(sum(df[m] * df[\"support\"]) / df[\"support\"].sum(), 3)\n        for m in [\"precision\", \"recall\", \"f1\", \"mcc\"]\n    }\n    print(\"Weighted average (using support):\", weighted)\n    return simple_mean, weighted\n\n_ = dataset_wide_metrics(per_label_results)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"threshold_results = {}\nfor t in tqdm(range(5, 100, 5)):\n    threshold = t / 100\n    y_preds_all = (y_probas_all > threshold).astype(int)\n    threshold_results[threshold] = []\n    for label_index, label in enumerate(labels):\n        y_targets, y_preds = y_targets_all[:, label_index], y_preds_all[:, label_index]\n        threshold_results[threshold].append(calc_label_metrics(label, y_targets, y_preds, threshold))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"metric_name = \"f1\"\nbest = {label: {metric_name: -1, \"result\": None} for label in labels}\nfor threshold, results in threshold_results.items():\n    for result in results:\n        label = result[\"label\"]\n        if result[metric_name] > best[label][metric_name]:\n            best[label] = {metric_name: result[metric_name], \"result\": result}\n\nresults = [b[\"result\"] for b in best.values()]\nper_label_threshold_results = pd.DataFrame(results, index=[result[\"label\"] for result in results])\ndisplay(per_label_threshold_results.drop(columns=[\"label\"]).round(3))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"load model","metadata":{}},{"cell_type":"code","source":"# Load the model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained(\"./saved_model\")\nmodel = AutoModelForSequenceClassification.from_pretrained(\"./saved_model\")\n","metadata":{},"execution_count":null,"outputs":[]}]}